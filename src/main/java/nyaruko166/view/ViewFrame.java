/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package nyaruko166.view;

import lombok.val;

import java.awt.Desktop;
import static java.awt.Desktop.getDesktop;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import static java.util.Arrays.asList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.apache.commons.io.FileUtils;

/**
 *
 * @author ADMIN
 */
public class ViewFrame extends javax.swing.JFrame {

    /**
     * Creates new form ViewFrame
     */
    public ViewFrame() {
        initComponents();
        CenteredFrame(this);
        readConfig();
    }

    private static final boolean USE_STEAM_PROTOCOL = true;
    private String steamDir = "";
    private String crackGameDir = "";
    private String steamGameDir = "";

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public void btnCrack() {
        int option = JOptionPane.showConfirmDialog(this, "Bạn có muốn auto sync save chứ?", "Confirm?", JOptionPane.YES_NO_CANCEL_OPTION);
        switch (option) {
            case 0 -> {
                saveMerge();
                startGameCrack(crackGameDir);
                System.exit(0);
            }
            case 1 -> {
                startGameCrack(crackGameDir);
                System.exit(0);
            }
            default -> {
            }
        }
    }

    public void btnSteam() {
        int option = JOptionPane.showConfirmDialog(this, "Bạn có muốn auto sync save chứ?", "Confirm?", JOptionPane.YES_NO_CANCEL_OPTION);
        switch (option) {
            case 0 -> {
                saveMerge();
                startGameSteam(steamDir);
                System.exit(0);
            }
            case 1 -> {
                startGameSteam(steamDir);
                System.exit(0);
            }
            default -> {
            }
        }
    }

    public void copyDir(Path src, Path dest) {
        String destStr = dest.toString();

        try {
            FileUtils.deleteDirectory(new File(destStr));
        } catch (IOException ex) {
            Logger.getLogger(ViewFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        new File(destStr).mkdirs();

        try {
            Files.walk(src).forEach(s -> {
                try {
                    Files.copy(s, dest.resolve(src.relativize(s)), StandardCopyOption.REPLACE_EXISTING);
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            });
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public void saveMerge() {
        String fileExtention = ".sav";
        File steamFile = getFile(steamGameDir, fileExtention);
        File crackFile = getFile(crackGameDir, fileExtention);
        if (steamFile != null && crackFile != null) {
            Date dateSteam = new Date(steamFile.lastModified());
            Date dateCrack = new Date(crackFile.lastModified());
            int result = dateSteam.compareTo(dateCrack);
            if (result < 0) {
                File src = new File(crackGameDir);
                File dest = new File(steamGameDir);
                copyDir(src.toPath(), dest.toPath());
            } else if (result > 0) {
                File src = new File(steamGameDir);
                File dest = new File(crackGameDir);
                copyDir(src.toPath(), dest.toPath());
            } else {
                JOptionPane.showMessageDialog(this, "Save đã giống nhau rồi ;b", "Save Checker", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }

    public void saveChecker() {
        String fileExtention = ".sav";
        File steamFile = getFile(steamGameDir, fileExtention);
        File crackFile = getFile(crackGameDir, fileExtention);
        if (steamFile != null && crackFile != null) {
            Date dateSteam = new Date(steamFile.lastModified());
            Date dateCrack = new Date(crackFile.lastModified());
            int result = dateSteam.compareTo(dateCrack);
            if (result < 0) {
                JOptionPane.showMessageDialog(this, "Steam cũ hơn Crack", "Save Checker", JOptionPane.INFORMATION_MESSAGE);
            } else if (result > 0) {
                JOptionPane.showMessageDialog(this, "Steam mới hơn Crack", "Save Checker", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Steam == Crack", "Save Checker", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }

    public File getFile(String path, String fileExtension) {
        File folderSteam = new File(path + "\\SaveGames");
        if (folderSteam.exists() && folderSteam.isDirectory()) {
            File lastestFile = null;

            Long lastestModifiedTime = Long.MIN_VALUE;

            File[] lstFile = folderSteam.listFiles();

            if (lstFile != null) {
                for (File x : lstFile) {
                    if (x.isFile() && x.getName().endsWith(fileExtension)) {
                        if (!x.getName().contains("Backup") && !x.getName().contains("ExternalBackup")) {
                            Long modifiedTime = x.lastModified();
                            if (modifiedTime > lastestModifiedTime) {
                                lastestModifiedTime = modifiedTime;
                                lastestFile = x;
                            }
                        }

                    }
                }
            }
            return lastestFile;
        }
        return null;
    }

    public void startGameCrack(String crackGameDir) {

        int lastIndex = crackGameDir.lastIndexOf('\\');

        if (lastIndex != -1) {
            String newPath = crackGameDir.substring(0, lastIndex);
            Desktop desktop = getDesktop();
            try {
                desktop.open(new File(newPath + "\\Binaries\\Win64\\FSD-Win64-Shipping.exe"));
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }

    }

    public static void startGameSteam(String steamDir) {
        if (USE_STEAM_PROTOCOL) {
            val desktop = getDesktop();
            URI steamProtocol = null;
            try {
                steamProtocol = new URI("steam://rungameid/548430");
            } catch (URISyntaxException e) {
                throw new RuntimeException(e);
            }
            try {
                desktop.browse(steamProtocol);
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        } else {
            try {
                startProcess(steamDir, "-applaunch", "548430");
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
    }

    private static void startProcess(String steamInstallationPath, String... arguments) throws IOException {
        val allArguments = new ArrayList<String>();
        allArguments.add(steamInstallationPath);
        val argumentsList = asList(arguments);
        allArguments.addAll(argumentsList);
        val process = new ProcessBuilder(allArguments);
        process.start();
    }

    public void readConfig() {
        try {
            File f = new File("./config.txt");
            if (f.exists() && !f.isDirectory()) {
                FileReader fr = new FileReader("config.txt");
                BufferedReader br = new BufferedReader(fr);

                for (int i = 0; i < 3; i++) {
                    if (i == 0) {
                        steamDir = br.readLine();
                    } else if (i == 1) {
                        crackGameDir = br.readLine();
                    } else {
                        steamGameDir = br.readLine();
                    }
                }
                br.close();
                fr.close();
            }
        } catch (IOException ex) {
            Logger.getLogger(ViewFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void CenteredFrame(javax.swing.JFrame objFrame) {
        Dimension objDimension = Toolkit.getDefaultToolkit().getScreenSize();
        int iCoordX = (objDimension.width - objFrame.getWidth()) / 2;
        int iCoordY = (objDimension.height - objFrame.getHeight()) / 2;
        objFrame.setLocation(iCoordX, iCoordY);
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Nyaruko Launcher");

        jButton1.setText("Crack");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Steam");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Setting");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        jLabel1.setText("Lần đầu thì vào ->");

        jButton4.setText("Save Checker");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3)
                    .addComponent(jButton2))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(63, 63, 63)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        btnSteam();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        this.setVisible(false);
        new SettingView().setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        saveChecker();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        btnCrack();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
